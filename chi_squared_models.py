# 
#
# This file contains code generated by A. Lambarri Martinez for the
# Galaxy Formation and Evolution course in the 
# Astrophysics Masters at UCM
#
# Version: Dic 11, 2023 @18:00
#
# SPDX-License-Identifier: GPL-3.0+
#

import numpy as np
from scipy.stats import binned_statistic_2d

from bin_determination import getBinNumber
from bundles import BundleMaker


def caluclate_chi_squared(
    mock_cmd, iac_star_cmd, all_boxes, color, magnitude,
    do_mesh = False, 
    verbose = False
):
    """Computes chi_squared merit function according to the recipe provided by Mighell (1999).

       To compute the chi_squared, the function iterates over all the provided bundles and computes the partial_chi_squared 
       for each of them, using the _partial_chi_ function, and sums up all the contributions at the end. _partial_chi_ computes
       the partial_chi_squared coef. by comparing the number of stars inside the bundles defined on both cmd's (same for both)
       and applying the recipe given by Mighell (1999). 
       To do this, two alternatives are offered: meshed and unmeshed.
       If do_mesh = True, a subgrid of k x l bins is created for each of the bundles, the optimal bin number is determined as 
       given by Freedman & Dyson (1981) and the partial_chi_squared is computed by iterating over all bins and summing up all the 
       contributions according to the given recipe.
       If do_mesh = False, no subgrid is created and the partial_chi_squared of each bundle is straightforwardly calculated.

       Parameters
       ----------
       mock_cmd : dataFrame
           DataFrame containing the cmd to be analyzed. Either observational
           or computer generated.
       iac_star_cmd : dataFrame
           Synthetic cmd generated using IAC STAR or others.
       all_boxes : array
           Array containing the limits of the bundles on which the merit function will be evaluated.
           Bundles must be defined based on the mock_cmd, and must be a square or rectangle in the cmd. 
           Must be of shape (n,2,>2) where n is the number of bundles: axis=1 must contain x_min, x_max
                                                                      axis=2 must contain y_min, y_max.
       color : str
           Color index to be used as x axis on the cmd's. Must be tabulated in mock_cmd and iac_star_cmd.
       magnitude : std
           Magnitude to be used as y index on the cmd's. Must be tabulated in mock_cmd and iac_star_cmd.
       do_mesh : bool, kwarg
           Whether to generate a mesh inside each bundle. If True, each bundle is subdivided into m x l
           bins of variable length.           
       verbose : bool, kwarg
           Whether to display middle steps while running.
       
       Returns
       -------
       chi_squared : float
           Computed chi_squared value
    """
    def _partial_chi_(mock_count, iac_star_count):
        """Computes the chi_squared metric for a single bundle of the ones that have been passed on to
        calculate_chi_squared. The recipe is the one given by Mighell (1999). The function computes the merit
        function directly from the HESS density diagrams derived from the cmd data. Computation proceeds the
        same way for either the meshed or unmeshed variants.

        Parameters
        ----------
        mock_count : array
            Array of shape (k,l) or (1,1) for the meshed or unmesed version.
            Must contain a 2d HESS density diagram (2d histogram) for the cmd to be analyzed.
        iac_star_count : array
            Array of shape (k,l) or (1,1) for the meshed or unmesed version.
            Must contain a 2d HESS density diagram (2d histogram) for the synthetic cmd.
            
        Returns
        -------
        partial_chi_squared : float
            Chi squared evaluation for a given bundle, either meshed or unmeshed.
        """
        partial_chi_squared = 0
        if mock_count.shape != iac_star_count.shape:
            raise Exception('RunTime Error: Bin numbers are not equal in both grids')
        else:
            partial_chi_squared = np.sum((mock_count+np.minimum(mock_count,1)-iac_star_count)**2/(mock_count+1))                       
        return partial_chi_squared



    
    chi_squared = 0
    nu = 0
    binx, biny = 1, 1
    for i, box in enumerate(all_boxes):
        bundle_mock, bundle_iac = BundleMaker(box, mock_cmd), BundleMaker(box, iac_star_cmd)
        if do_mesh:
            binx, biny = getBinNumber(bundle_mock[color]), getBinNumber(bundle_mock[magnitude])
        
        hist_mock, _, _, _ = binned_statistic_2d(bundle_mock[color], bundle_mock[magnitude], 1, 
                                                 statistic='count', range=[[box[0,:].min(),box[0,:].max()],[box[1,:].min(),box[1,:].max()]],
                                                 bins=[binx, biny])
        hist_iac, _, _, _ = binned_statistic_2d(bundle_iac[color], bundle_iac[magnitude], 1, 
                                                statistic='count', range=[[box[0,:].min(),box[0,:].max()],[box[1,:].min(),box[1,:].max()]],
                                                bins=[binx, biny])
        
        chi_squared = chi_squared + _partial_chi_(hist_mock,hist_iac)
            
        nu = nu + binx*biny
        
        if verbose:
            print(f'Information for interation over bin numer {i}')
            print(f'-------------------------------------------')
            print(f'-Computed number of bins is {binx} x {biny} = {binx*biny}')
            print(f'-Computed partial chi squared is {_partial_chi_(hist_mock,hist_iac)}')
            print(f'-The length of bundles is: mock={len(bundle_mock)}, iac={len(bundle_iac)}')
            print(f'-The star count as derived from histograms is hist_mock={np.sum(hist_mock)}, hist_iac={np.sum(hist_iac)}')
            if (len(bundle_mock)==np.sum(hist_mock)) and (len(bundle_iac)==np.sum(hist_iac)):
                print(f'COUNT HAS BEEN PERFORMED SUCCESFULLY\n')
            else:
                print(f'OOPS... SOMETHING WENT WRONG WHEN COUNTING STARS\n')

    nu = nu - 1
    chi_squared = chi_squared/nu
    if verbose:
        print(f'-Total number of degrees of freedom is {nu}')
    
    return chi_squared
    