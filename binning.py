# 
#
# This file contains code generated by A. Lambarri Martinez for the
# Galaxy Formation and Evolution course in the 
# Astrophysics Masters at UCM
#
# Version: Dic 11, 2023 @18:00
#
# SPDX-License-Identifier: GPL-3.0+
#


def BinTheData(q1, q2, dq1):
    """Takes two quantities, q1 and q1, and bins the data contained in q2 to bins of
       width dq1. It returns the mean on q1 and mean on q2 and their standard deviations.

       Parameters
       ----------
       q1 : array
           Array of shape (n,) that contain q1 data.
       q2 : array
           Array of shape (n,) that contains q2 data.
       dq1 : float
           Bin width on q1.

       Returns
       -------
       red_mean : array
           Array containing the mean of q1 data inside each bin. Size of determined
           or given bin length.
       quant_mean : array
           Array containing the mean of q2 data inside each bin.Size of determined
           or given bin length.
       red_std : array
           Array containing the std of q1 data inside each bin.Size of determined
           or given bin length.
       quant_std : array
           Array containing the std of q2 data inside each bin.Size of determined
           or given bin length.
    """
    n = int(np.floor((np.max(q1)+0.01)/dq1))
    bin_edges = np.linspace(0,np.max(q1)+0.01, num=n+1)#, num=n+1)
    indices = np.digitize(q1, bin_edges)
    
    red_mean = np.array([q1[indices==i].mean() for i in range(1,n+1)])
    quant_mean = np.array([q2[indices==i].mean() for i in range(1,n+1)])
    red_std = np.array([q1[indices==i].std() for i in range(1,n+1)])
    quant_std = np.array([q2[indices==i].std() for i in range(1,n+1)])
    if red_mean.shape != quant_mean.shape:
        print('wacho aqui fallo algo')
    return red_mean, quant_mean, red_std, quant_std











